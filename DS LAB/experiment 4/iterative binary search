# AIM OF THE EXPERIMENT
   write a program using iterative function for binary search
# BRIEF DESCRPITION OF BINARY SEARCH
Sequential search algorithm is very slow if list contains more number of
 elements.
• If the array is not sorted ,linear search is the only solution.
• If the list is sorted , we can use a more efficient algorithm called
 the binary search.
• We should use a binary search whenever the list starts to become large.
• The binary search starts by testing the data in the element at the middle of the list.
• This determines if the target is in first half or second half of the list.
• If it is in first half , we do not need to check the second half.
• If it is in second half , we do not need to check the first half.
• In other words ,either way we eliminate half the list from further
 consideration.
• We repeat this process until we find the target or satisfy ourselves
 that it is not in the list.
• To find the middle of the list we three variables,
one to identify the beginning of the list(first)
one to identify the beginning of the list(mid)
one to identify the beginning of the list(last)
mid=( first + last )/2
Step by step procedure explaining the each output:
Binary Search is a search algorithm that is used to find the position of an element (target value ) in a sorted array. The array should be sorted prior to applying a binary search.
Binary search is also known by these names, logarithmic search, binary chop, half interval search.
Working	
The binary search algorithm works by comparing the element to be searched by the middle element of the array and based on this comparison follows the required procedure.
Case 1 − element = middle, the element is found return the index.
Case 2 − element > middle, search for the element in the sub-array starting from middle+1 index to n.
Case 3 − element < middle, search for element in the sub-array starting from 0 index to middle -1
output obtained:
|[output](iterativebinarysearch1.png)(iterativebinarysearch2.png)(iterativebinarysearch3.png)

   
